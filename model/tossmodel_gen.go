// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tOssFieldNames          = builder.RawFieldNames(&TOss{})
	tOssRows                = strings.Join(tOssFieldNames, ",")
	tOssRowsExpectAutoSet   = strings.Join(stringx.Remove(tOssFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	tOssRowsWithPlaceHolder = strings.Join(stringx.Remove(tOssFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTOssIdPrefix = "cache:tOss:id:"
)

type (
	tOssModel interface {
		Insert(ctx context.Context, data *TOss) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TOss, error)
		Update(ctx context.Context, data *TOss) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTOssModel struct {
		sqlc.CachedConn
		table string
	}

	TOss struct {
		Id         int64          `db:"id"`
		CreateTime time.Time      `db:"create_time"`
		UpdateTime time.Time      `db:"update_time"`
		DeleteTime time.Time      `db:"delete_time"`
		DelState   int64          `db:"del_state"`
		Version    int64          `db:"version"`     // 乐观锁版本号
		TenantId   string         `db:"tenant_id"`   // 租户ID
		Category   sql.NullInt64  `db:"category"`    // 分类
		OssCode    sql.NullString `db:"oss_code"`    // 资源编号
		Endpoint   sql.NullString `db:"endpoint"`    // 资源地址
		AccessKey  sql.NullString `db:"access_key"`  // accessKey
		SecretKey  sql.NullString `db:"secret_key"`  // secretKey
		BucketName sql.NullString `db:"bucket_name"` // 空间名
		AppId      sql.NullString `db:"app_id"`      // 应用ID
		Region     sql.NullString `db:"region"`      // 地域简称
		Remark     sql.NullString `db:"remark"`      // 备注
		Status     sql.NullInt64  `db:"status"`      // 状态
	}
)

func newTOssModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTOssModel {
	return &defaultTOssModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`t_oss`",
	}
}

func (m *defaultTOssModel) Delete(ctx context.Context, id int64) error {
	tOssIdKey := fmt.Sprintf("%s%v", cacheTOssIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tOssIdKey)
	return err
}

func (m *defaultTOssModel) FindOne(ctx context.Context, id int64) (*TOss, error) {
	tOssIdKey := fmt.Sprintf("%s%v", cacheTOssIdPrefix, id)
	var resp TOss
	err := m.QueryRowCtx(ctx, &resp, tOssIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tOssRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTOssModel) Insert(ctx context.Context, data *TOss) (sql.Result, error) {
	tOssIdKey := fmt.Sprintf("%s%v", cacheTOssIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tOssRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.TenantId, data.Category, data.OssCode, data.Endpoint, data.AccessKey, data.SecretKey, data.BucketName, data.AppId, data.Region, data.Remark, data.Status)
	}, tOssIdKey)
	return ret, err
}

func (m *defaultTOssModel) Update(ctx context.Context, data *TOss) error {
	tOssIdKey := fmt.Sprintf("%s%v", cacheTOssIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tOssRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.TenantId, data.Category, data.OssCode, data.Endpoint, data.AccessKey, data.SecretKey, data.BucketName, data.AppId, data.Region, data.Remark, data.Status, data.Id)
	}, tOssIdKey)
	return err
}

func (m *defaultTOssModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTOssIdPrefix, primary)
}

func (m *defaultTOssModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tOssRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTOssModel) tableName() string {
	return m.table
}
