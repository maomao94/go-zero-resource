// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mgtw.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MgtwClient is the client API for Mgtw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgtwClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResp, error)
	PushOneWsMsgToUser(ctx context.Context, in *PushOneMsgToUserReq, opts ...grpc.CallOption) (*PushOneMsgToUserRes, error)
}

type mgtwClient struct {
	cc grpc.ClientConnInterface
}

func NewMgtwClient(cc grpc.ClientConnInterface) MgtwClient {
	return &mgtwClient{cc}
}

func (c *mgtwClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/mgtw.mgtw/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgtwClient) PushOneWsMsgToUser(ctx context.Context, in *PushOneMsgToUserReq, opts ...grpc.CallOption) (*PushOneMsgToUserRes, error) {
	out := new(PushOneMsgToUserRes)
	err := c.cc.Invoke(ctx, "/mgtw.mgtw/pushOneWsMsgToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgtwServer is the server API for Mgtw service.
// All implementations must embed UnimplementedMgtwServer
// for forward compatibility
type MgtwServer interface {
	Ping(context.Context, *Empty) (*PingResp, error)
	PushOneWsMsgToUser(context.Context, *PushOneMsgToUserReq) (*PushOneMsgToUserRes, error)
	mustEmbedUnimplementedMgtwServer()
}

// UnimplementedMgtwServer must be embedded to have forward compatible implementations.
type UnimplementedMgtwServer struct {
}

func (UnimplementedMgtwServer) Ping(context.Context, *Empty) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMgtwServer) PushOneWsMsgToUser(context.Context, *PushOneMsgToUserReq) (*PushOneMsgToUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushOneWsMsgToUser not implemented")
}
func (UnimplementedMgtwServer) mustEmbedUnimplementedMgtwServer() {}

// UnsafeMgtwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgtwServer will
// result in compilation errors.
type UnsafeMgtwServer interface {
	mustEmbedUnimplementedMgtwServer()
}

func RegisterMgtwServer(s grpc.ServiceRegistrar, srv MgtwServer) {
	s.RegisterService(&Mgtw_ServiceDesc, srv)
}

func _Mgtw_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgtwServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgtw.mgtw/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgtwServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mgtw_PushOneWsMsgToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushOneMsgToUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgtwServer).PushOneWsMsgToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mgtw.mgtw/pushOneWsMsgToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgtwServer).PushOneWsMsgToUser(ctx, req.(*PushOneMsgToUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Mgtw_ServiceDesc is the grpc.ServiceDesc for Mgtw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mgtw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mgtw.mgtw",
	HandlerType: (*MgtwServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _Mgtw_Ping_Handler,
		},
		{
			MethodName: "pushOneWsMsgToUser",
			Handler:    _Mgtw_PushOneWsMsgToUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mgtw.proto",
}
